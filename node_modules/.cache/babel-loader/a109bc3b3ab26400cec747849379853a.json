{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import poolsConfig from'config/constants/pools';import sousChefABI from'config/abi/sousChef.json';import cakeABI from'config/abi/cake.json';import wbnbABI from'config/abi/weth.json';import{QuoteToken}from'config/constants/types';import multicall from'utils/multicall';import{getAddress,getWbnbAddress}from'utils/addressHelpers';import BigNumber from'bignumber.js';export var fetchPoolsBlockLimits=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var poolsWithEnd,callsStartBlock,callsEndBlock,starts,ends;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:poolsWithEnd=poolsConfig.filter(function(p){return p.sousId!==0;});callsStartBlock=poolsWithEnd.map(function(poolConfig){return{address:getAddress(poolConfig.contractAddress),name:'startBlock'};});callsEndBlock=poolsWithEnd.map(function(poolConfig){return{address:getAddress(poolConfig.contractAddress),name:'bonusEndBlock'};});_context.next=5;return multicall(sousChefABI,callsStartBlock);case 5:starts=_context.sent;_context.next=8;return multicall(sousChefABI,callsEndBlock);case 8:ends=_context.sent;return _context.abrupt(\"return\",poolsWithEnd.map(function(cakePoolConfig,index){var startBlock=starts[index];var endBlock=ends[index];return{sousId:cakePoolConfig.sousId,startBlock:new BigNumber(startBlock).toJSON(),endBlock:new BigNumber(endBlock).toJSON()};}));case 10:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsBlockLimits(){return _ref.apply(this,arguments);};}();export var fetchPoolsTotalStatking=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var nonBnbPools,bnbPool,callsNonBnbPools,callsBnbPools,nonBnbPoolsTotalStaked,bnbPoolsTotalStaked;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:nonBnbPools=poolsConfig.filter(function(p){return p.stakingTokenName!==QuoteToken.BNB;});bnbPool=poolsConfig.filter(function(p){return p.stakingTokenName===QuoteToken.BNB;});callsNonBnbPools=nonBnbPools.map(function(poolConfig){return{address:poolConfig.stakingTokenAddress,name:'balanceOf',params:[getAddress(poolConfig.contractAddress)]};});callsBnbPools=bnbPool.map(function(poolConfig){return{address:getWbnbAddress(),name:'balanceOf',params:[getAddress(poolConfig.contractAddress)]};});_context2.next=6;return multicall(cakeABI,callsNonBnbPools);case 6:nonBnbPoolsTotalStaked=_context2.sent;_context2.next=9;return multicall(wbnbABI,callsBnbPools);case 9:bnbPoolsTotalStaked=_context2.sent;return _context2.abrupt(\"return\",[].concat(_toConsumableArray(nonBnbPools.map(function(p,index){return{sousId:p.sousId,totalStaked:new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()};})),_toConsumableArray(bnbPool.map(function(p,index){return{sousId:p.sousId,totalStaked:new BigNumber(bnbPoolsTotalStaked[index]).toJSON()};}))));case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchPoolsTotalStatking(){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/Matias/Downloads/svy final/SPreace-frontend/src/state/pools/fetchPools.ts"],"names":["poolsConfig","sousChefABI","cakeABI","wbnbABI","QuoteToken","multicall","getAddress","getWbnbAddress","BigNumber","fetchPoolsBlockLimits","poolsWithEnd","filter","p","sousId","callsStartBlock","map","poolConfig","address","contractAddress","name","callsEndBlock","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStatking","nonBnbPools","stakingTokenName","BNB","bnbPool","callsNonBnbPools","stakingTokenAddress","params","callsBnbPools","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked"],"mappings":"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","sourcesContent":["import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStatking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.stakingTokenAddress,\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
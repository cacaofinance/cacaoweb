{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar ProviderSubprovider = require('./json-rpc-engine-middleware');\n\nvar createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager');\n\nvar SubscriptionsSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {\n  \"use strict\";\n\n  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);\n\n  var _super = _createSuper(SubscriptionsSubprovider);\n\n  function SubscriptionsSubprovider() {\n    _classCallCheck(this, SubscriptionsSubprovider);\n\n    return _super.call(this, function (_ref) {\n      var blockTracker = _ref.blockTracker,\n          provider = _ref.provider,\n          engine = _ref.engine;\n\n      var _createSubscriptionMa = createSubscriptionManager({\n        blockTracker: blockTracker,\n        provider: provider\n      }),\n          events = _createSubscriptionMa.events,\n          middleware = _createSubscriptionMa.middleware; // forward subscription events on the engine\n\n\n      events.on('notification', function (data) {\n        return engine.emit('data', null, data);\n      }); // return the subscription install/remove middleware\n\n      return middleware;\n    });\n  }\n\n  return SubscriptionsSubprovider;\n}(ProviderSubprovider);\n\nmodule.exports = SubscriptionsSubprovider;","map":{"version":3,"sources":["C:/Users/Matias/Downloads/new/svy.finance/node_modules/web3-provider-engine/subproviders/subscriptions.js"],"names":["ProviderSubprovider","require","createSubscriptionManager","SubscriptionsSubprovider","blockTracker","provider","engine","events","middleware","on","data","emit","module","exports"],"mappings":";;;;;;AAAA,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,8BAAD,CAAnC;;AACA,IAAMC,yBAAyB,GAAGD,OAAO,CAAC,0CAAD,CAAzC;;IAEME,wB;;;;;;;AACJ,sCAAc;AAAA;;AAAA,6BACN,gBAAwC;AAAA,UAArCC,YAAqC,QAArCA,YAAqC;AAAA,UAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,UAAbC,MAAa,QAAbA,MAAa;;AAAA,kCACbJ,yBAAyB,CAAC;AAAEE,QAAAA,YAAY,EAAZA,YAAF;AAAgBC,QAAAA,QAAQ,EAARA;AAAhB,OAAD,CADZ;AAAA,UACpCE,MADoC,yBACpCA,MADoC;AAAA,UAC5BC,UAD4B,yBAC5BA,UAD4B,EAE5C;;;AACAD,MAAAA,MAAM,CAACE,EAAP,CAAU,cAAV,EAA0B,UAACC,IAAD;AAAA,eAAUJ,MAAM,CAACK,IAAP,CAAY,MAAZ,EAAoB,IAApB,EAA0BD,IAA1B,CAAV;AAAA,OAA1B,EAH4C,CAI5C;;AACA,aAAOF,UAAP;AACD,KAPW;AAQb;;;EAToCR,mB;;AAYvCY,MAAM,CAACC,OAAP,GAAiBV,wBAAjB","sourcesContent":["const ProviderSubprovider = require('./json-rpc-engine-middleware')\r\nconst createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager')\r\n\r\nclass SubscriptionsSubprovider extends ProviderSubprovider {\r\n  constructor() {\r\n    super(({ blockTracker, provider, engine }) => {\r\n      const { events, middleware } = createSubscriptionManager({ blockTracker, provider })\r\n      // forward subscription events on the engine\r\n      events.on('notification', (data) => engine.emit('data', null, data))\r\n      // return the subscription install/remove middleware\r\n      return middleware\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = SubscriptionsSubprovider\r\n"]},"metadata":{},"sourceType":"script"}
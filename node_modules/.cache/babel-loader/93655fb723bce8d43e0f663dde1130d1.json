{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  var func = function func(providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    var providerList = [];\n\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider) {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider) {\n      try {\n        providerList.push(new providers.PocketProvider(network));\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      var quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  var func = function func(providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nvar homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nvar ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nvar classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\nvar networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n  }\n};\n/**\r\n *  getNetwork\r\n *\r\n *  Converts a named common networks or chain ID (network ID) to a Network\r\n *  and verifies a network is a valid Network..\r\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (var name in networks) {\n      var _standard = networks[name];\n\n      if (_standard.chainId === network) {\n        return {\n          name: _standard.name,\n          chainId: _standard.chainId,\n          ensAddress: _standard.ensAddress || null,\n          _defaultProvider: _standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    var _standard2 = networks[network];\n\n    if (_standard2 == null) {\n      return null;\n    }\n\n    return {\n      name: _standard2.name,\n      chainId: _standard2.chainId,\n      ensAddress: _standard2.ensAddress,\n      _defaultProvider: _standard2._defaultProvider || null\n    };\n  }\n\n  var standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  var defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n;\r\nfunction isRenetworkable(value) {\r\n    return (value && typeof (value.renetwork) === \"function\");\r\n}\r\nfunction ethDefaultProvider(network) {\r\n    const func = function (providers, options) {\r\n        if (options == null) {\r\n            options = {};\r\n        }\r\n        const providerList = [];\r\n        if (providers.InfuraProvider) {\r\n            try {\r\n                providerList.push(new providers.InfuraProvider(network, options.infura));\r\n            }\r\n            catch (error) { }\r\n        }\r\n        if (providers.EtherscanProvider) {\r\n            try {\r\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\r\n            }\r\n            catch (error) { }\r\n        }\r\n        if (providers.AlchemyProvider) {\r\n            try {\r\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\r\n            }\r\n            catch (error) { }\r\n        }\r\n        if (providers.PocketProvider) {\r\n            try {\r\n                providerList.push(new providers.PocketProvider(network));\r\n            }\r\n            catch (error) { }\r\n        }\r\n        if (providers.CloudflareProvider) {\r\n            try {\r\n                providerList.push(new providers.CloudflareProvider(network));\r\n            }\r\n            catch (error) { }\r\n        }\r\n        if (providerList.length === 0) {\r\n            return null;\r\n        }\r\n        if (providers.FallbackProvider) {\r\n            let quorum = 1;\r\n            if (options.quorum != null) {\r\n                quorum = options.quorum;\r\n            }\r\n            else if (network === \"homestead\") {\r\n                quorum = 2;\r\n            }\r\n            return new providers.FallbackProvider(providerList, quorum);\r\n        }\r\n        return providerList[0];\r\n    };\r\n    func.renetwork = function (network) {\r\n        return ethDefaultProvider(network);\r\n    };\r\n    return func;\r\n}\r\nfunction etcDefaultProvider(url, network) {\r\n    const func = function (providers, options) {\r\n        if (providers.JsonRpcProvider) {\r\n            return new providers.JsonRpcProvider(url, network);\r\n        }\r\n        return null;\r\n    };\r\n    func.renetwork = function (network) {\r\n        return etcDefaultProvider(url, network);\r\n    };\r\n    return func;\r\n}\r\nconst homestead = {\r\n    chainId: 1,\r\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n    name: \"homestead\",\r\n    _defaultProvider: ethDefaultProvider(\"homestead\")\r\n};\r\nconst ropsten = {\r\n    chainId: 3,\r\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n    name: \"ropsten\",\r\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\r\n};\r\nconst classicMordor = {\r\n    chainId: 63,\r\n    name: \"classicMordor\",\r\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\r\n};\r\nconst networks = {\r\n    unspecified: {\r\n        chainId: 0,\r\n        name: \"unspecified\"\r\n    },\r\n    homestead: homestead,\r\n    mainnet: homestead,\r\n    morden: {\r\n        chainId: 2,\r\n        name: \"morden\"\r\n    },\r\n    ropsten: ropsten,\r\n    testnet: ropsten,\r\n    rinkeby: {\r\n        chainId: 4,\r\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n        name: \"rinkeby\",\r\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\r\n    },\r\n    kovan: {\r\n        chainId: 42,\r\n        name: \"kovan\",\r\n        _defaultProvider: ethDefaultProvider(\"kovan\")\r\n    },\r\n    goerli: {\r\n        chainId: 5,\r\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n        name: \"goerli\",\r\n        _defaultProvider: ethDefaultProvider(\"goerli\")\r\n    },\r\n    // ETC (See: #351)\r\n    classic: {\r\n        chainId: 61,\r\n        name: \"classic\",\r\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\r\n    },\r\n    classicMorden: {\r\n        chainId: 62,\r\n        name: \"classicMorden\",\r\n    },\r\n    classicMordor: classicMordor,\r\n    classicTestnet: classicMordor,\r\n    classicKotti: {\r\n        chainId: 6,\r\n        name: \"classicKotti\",\r\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\r\n    },\r\n};\r\n/**\r\n *  getNetwork\r\n *\r\n *  Converts a named common networks or chain ID (network ID) to a Network\r\n *  and verifies a network is a valid Network..\r\n */\r\nexport function getNetwork(network) {\r\n    // No network (null)\r\n    if (network == null) {\r\n        return null;\r\n    }\r\n    if (typeof (network) === \"number\") {\r\n        for (const name in networks) {\r\n            const standard = networks[name];\r\n            if (standard.chainId === network) {\r\n                return {\r\n                    name: standard.name,\r\n                    chainId: standard.chainId,\r\n                    ensAddress: (standard.ensAddress || null),\r\n                    _defaultProvider: (standard._defaultProvider || null)\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            chainId: network,\r\n            name: \"unknown\"\r\n        };\r\n    }\r\n    if (typeof (network) === \"string\") {\r\n        const standard = networks[network];\r\n        if (standard == null) {\r\n            return null;\r\n        }\r\n        return {\r\n            name: standard.name,\r\n            chainId: standard.chainId,\r\n            ensAddress: standard.ensAddress,\r\n            _defaultProvider: (standard._defaultProvider || null)\r\n        };\r\n    }\r\n    const standard = networks[network.name];\r\n    // Not a standard network; check that it is a valid network in general\r\n    if (!standard) {\r\n        if (typeof (network.chainId) !== \"number\") {\r\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\r\n        }\r\n        return network;\r\n    }\r\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\r\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\r\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\r\n    }\r\n    // @TODO: In the next major version add an attach function to a defaultProvider\r\n    // class and move the _defaultProvider internal to this file (extend Network)\r\n    let defaultProvider = network._defaultProvider || null;\r\n    if (defaultProvider == null && standard._defaultProvider) {\r\n        if (isRenetworkable(standard._defaultProvider)) {\r\n            defaultProvider = standard._defaultProvider.renetwork(network);\r\n        }\r\n        else {\r\n            defaultProvider = standard._defaultProvider;\r\n        }\r\n    }\r\n    // Standard Network (allow overriding the ENS address)\r\n    return {\r\n        name: network.name,\r\n        chainId: standard.chainId,\r\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\r\n        _defaultProvider: defaultProvider\r\n    };\r\n}\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport var CrowdsaleAccount = /*#__PURE__*/function (_Description) {\n  _inherits(CrowdsaleAccount, _Description);\n\n  var _super = _createSuper(CrowdsaleAccount);\n\n  function CrowdsaleAccount() {\n    _classCallCheck(this, CrowdsaleAccount);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CrowdsaleAccount, [{\n    key: \"isCrowdsaleAccount\",\n    value: function isCrowdsaleAccount(value) {\n      return !!(value && value._isCrowdsaleAccount);\n    }\n  }]);\n\n  return CrowdsaleAccount;\n}(Description); // See: https://github.com/ethereum/pyethsaletool\n\nexport function decrypt(json, password) {\n  var data = JSON.parse(json);\n  password = getPassword(password); // Ethereum Address\n\n  var ethaddr = getAddress(searchPath(data, \"ethaddr\")); // Encrypted Seed\n\n  var encseed = looseArrayify(searchPath(data, \"encseed\"));\n\n  if (!encseed || encseed.length % 16 !== 0) {\n    logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n  }\n\n  var key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  var iv = encseed.slice(0, 16);\n  var encryptedSeed = encseed.slice(16); // Decrypt the seed\n\n  var aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n  var seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed))); // This wallet format is weird... Convert the binary encoded hex to a string.\n\n  var seedHex = \"\";\n\n  for (var i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n\n  var seedHexBytes = toUtf8Bytes(seedHex);\n  var privateKey = keccak256(seedHexBytes);\n  return new CrowdsaleAccount({\n    _isCrowdsaleAccount: true,\n    address: ethaddr,\n    privateKey: privateKey\n  });\n}","map":{"version":3,"sources":["../src.ts/crowdsale.ts"],"names":[],"mappings":"AAAA;;;;;;AAEA,OAAO,GAAP,MAAgB,QAAhB;AAGA,SAAS,UAAT,QAA2B,wBAA3B;AACA,SAAS,QAAT,QAAgC,sBAAhC;AACA,SAAS,SAAT,QAA0B,0BAA1B;AACA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,WAAT,QAA4B,wBAA5B;AACA,SAAS,WAAT,QAA4B,2BAA5B;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,SAAS,WAAT,EAAsB,aAAtB,EAAqC,UAArC,QAAuD,SAAvD;AASA,WAAa,gBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAQI,4BAAmB,KAAnB,EAA6B;AACzB,aAAO,CAAC,EAAE,KAAK,IAAI,KAAK,CAAC,mBAAjB,CAAR;AACH;AAVL;;AAAA;AAAA,EAAsC,WAAtC,E,CAaA;;AACA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAAgC,QAAhC,EAAwD;AAC1D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAb;AAEA,EAAA,QAAQ,GAAG,WAAW,CAAC,QAAD,CAAtB,CAH0D,CAK1D;;AACA,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,IAAD,EAAO,SAAP,CAAX,CAA1B,CAN0D,CAQ1D;;AACA,MAAM,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,IAAD,EAAO,SAAP,CAAX,CAA7B;;AACA,MAAI,CAAC,OAAD,IAAa,OAAO,CAAC,MAAR,GAAiB,EAAlB,KAA0B,CAA1C,EAA6C;AACzC,IAAA,MAAM,CAAC,kBAAP,CAA0B,iBAA1B,EAA6C,MAA7C,EAAqD,IAArD;AACH;;AAED,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,EAA2B,EAA3B,EAA+B,QAA/B,CAAP,CAAR,CAAyD,KAAzD,CAA+D,CAA/D,EAAkE,EAAlE,CAAZ;AAEA,MAAM,EAAE,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAX;AACA,MAAM,aAAa,GAAG,OAAO,CAAC,KAAR,CAAc,EAAd,CAAtB,CAjB0D,CAmB1D;;AACA,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,eAAJ,CAAoB,GAAxB,CAA4B,GAA5B,EAAiC,EAAjC,CAAf;AACA,MAAM,IAAI,GAAG,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAkB,KAAlB,CAAwB,QAAQ,CAAC,MAAM,CAAC,OAAP,CAAe,aAAf,CAAD,CAAhC,CAAb,CArB0D,CAuB1D;;AACA,MAAI,OAAO,GAAG,EAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,IAAA,OAAO,IAAI,MAAM,CAAC,YAAP,CAAoB,IAAI,CAAC,CAAD,CAAxB,CAAX;AACH;;AAED,MAAM,YAAY,GAAG,WAAW,CAAC,OAAD,CAAhC;AAEA,MAAM,UAAU,GAAG,SAAS,CAAC,YAAD,CAA5B;AAEA,SAAO,IAAI,gBAAJ,CAAsB;AACzB,IAAA,mBAAmB,EAAE,IADI;AAEzB,IAAA,OAAO,EAAE,OAFgB;AAGzB,IAAA,UAAU,EAAE;AAHa,GAAtB,CAAP;AAKH","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport aes from \"aes-js\";\r\nimport { getAddress } from \"@ethersproject/address\";\r\nimport { arrayify } from \"@ethersproject/bytes\";\r\nimport { keccak256 } from \"@ethersproject/keccak256\";\r\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\r\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\r\nimport { Description } from \"@ethersproject/properties\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\r\nexport class CrowdsaleAccount extends Description {\r\n    isCrowdsaleAccount(value) {\r\n        return !!(value && value._isCrowdsaleAccount);\r\n    }\r\n}\r\n// See: https://github.com/ethereum/pyethsaletool\r\nexport function decrypt(json, password) {\r\n    const data = JSON.parse(json);\r\n    password = getPassword(password);\r\n    // Ethereum Address\r\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\r\n    // Encrypted Seed\r\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\r\n    if (!encseed || (encseed.length % 16) !== 0) {\r\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\r\n    }\r\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\r\n    const iv = encseed.slice(0, 16);\r\n    const encryptedSeed = encseed.slice(16);\r\n    // Decrypt the seed\r\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\r\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\r\n    // This wallet format is weird... Convert the binary encoded hex to a string.\r\n    let seedHex = \"\";\r\n    for (let i = 0; i < seed.length; i++) {\r\n        seedHex += String.fromCharCode(seed[i]);\r\n    }\r\n    const seedHexBytes = toUtf8Bytes(seedHex);\r\n    const privateKey = keccak256(seedHexBytes);\r\n    return new CrowdsaleAccount({\r\n        _isCrowdsaleAccount: true,\r\n        address: ethaddr,\r\n        privateKey: privateKey\r\n    });\r\n}\r\n//# sourceMappingURL=crowdsale.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { toastTypes } from '@pancakeswap-libs/uikit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { kebabCase } from 'lodash';\nimport { push } from 'state/toasts';\nimport { getAchievements } from './helpers';\nconst initialState = {\n  data: []\n};\nexport const achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    addAchievement: (state, action) => {\n      state.data.push(action.payload);\n    },\n    addAchievements: (state, action) => {\n      state.data.concat(action.payload);\n    },\n    setAchievements: (state, action) => {\n      state.data = action.payload;\n    },\n    clearAchievements: state => {\n      state.data = [];\n    }\n  }\n}); // Actions\n\nexport const {\n  addAchievement,\n  addAchievements,\n  setAchievements,\n  clearAchievements\n} = achievementSlice.actions; // Thunks\n\nexport const fetchAchievements = account => async dispatch => {\n  try {\n    const achievements = await getAchievements(account);\n    dispatch(setAchievements(achievements));\n  } catch (error) {\n    console.error(error);\n    const title = 'Error fetching achievements';\n    dispatch(push({\n      id: kebabCase(title),\n      type: toastTypes.DANGER,\n      title\n    }));\n  }\n};\nexport default achievementSlice.reducer;","map":{"version":3,"sources":["C:/Users/Matias/Downloads/svy final/SPreace-frontend/src/state/achievements/index.ts"],"names":["toastTypes","createSlice","kebabCase","push","getAchievements","initialState","data","achievementSlice","name","reducers","addAchievement","state","action","payload","addAchievements","concat","setAchievements","clearAchievements","actions","fetchAchievements","account","dispatch","achievements","error","console","title","id","type","DANGER","reducer"],"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,yBAA3B;AACA,SAASC,WAAT,QAAqD,kBAArD;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,SAASC,eAAT,QAAgC,WAAhC;AAEA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AAD+B,CAAvC;AAIA,OAAO,MAAMC,gBAAgB,GAAGN,WAAW,CAAC;AAC1CO,EAAAA,IAAI,EAAE,cADoC;AAE1CH,EAAAA,YAF0C;AAG1CI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA+C;AAC7DD,MAAAA,KAAK,CAACL,IAAN,CAAWH,IAAX,CAAgBS,MAAM,CAACC,OAAvB;AACD,KAHO;AAIRC,IAAAA,eAAe,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAiD;AAChED,MAAAA,KAAK,CAACL,IAAN,CAAWS,MAAX,CAAkBH,MAAM,CAACC,OAAzB;AACD,KANO;AAORG,IAAAA,eAAe,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAiD;AAChED,MAAAA,KAAK,CAACL,IAAN,GAAaM,MAAM,CAACC,OAApB;AACD,KATO;AAURI,IAAAA,iBAAiB,EAAGN,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACL,IAAN,GAAa,EAAb;AACD;AAZO;AAHgC,CAAD,CAApC,C,CAmBP;;AACA,OAAO,MAAM;AAAEI,EAAAA,cAAF;AAAkBI,EAAAA,eAAlB;AAAmCE,EAAAA,eAAnC;AAAoDC,EAAAA;AAApD,IAA0EV,gBAAgB,CAACW,OAAjG,C,CAEP;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAAqB,MAAOC,QAAP,IAA8B;AAClF,MAAI;AACF,UAAMC,YAAY,GAAG,MAAMlB,eAAe,CAACgB,OAAD,CAA1C;AACAC,IAAAA,QAAQ,CAACL,eAAe,CAACM,YAAD,CAAhB,CAAR;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAME,KAAK,GAAG,6BAAd;AACAJ,IAAAA,QAAQ,CAAClB,IAAI,CAAC;AAAEuB,MAAAA,EAAE,EAAExB,SAAS,CAACuB,KAAD,CAAf;AAAwBE,MAAAA,IAAI,EAAE3B,UAAU,CAAC4B,MAAzC;AAAiDH,MAAAA;AAAjD,KAAD,CAAL,CAAR;AACD;AACF,CATM;AAWP,eAAelB,gBAAgB,CAACsB,OAAhC","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { toastTypes } from '@pancakeswap-libs/uikit'\r\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\r\nimport { kebabCase } from 'lodash'\r\nimport { push } from 'state/toasts'\r\nimport { AchievementState, Achievement } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  data: [],\r\n}\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.data.push(action.payload)\r\n    },\r\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data.concat(action.payload)\r\n    },\r\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = action.payload\r\n    },\r\n    clearAchievements: (state) => {\r\n      state.data = []\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\r\n\r\n// Thunks\r\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    const achievements = await getAchievements(account)\r\n    dispatch(setAchievements(achievements))\r\n  } catch (error) {\r\n    console.error(error)\r\n    const title = 'Error fetching achievements'\r\n    dispatch(push({ id: kebabCase(title), type: toastTypes.DANGER, title }))\r\n  }\r\n}\r\n\r\nexport default achievementSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}
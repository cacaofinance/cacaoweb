{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AxisProvider = void 0;\n\nconst axios_1 = require(\"axios\");\n\nclass AxisProvider {\n  constructor() {\n    this.pendingRequests = 0;\n    this.axios = axios_1.default.create({});\n    this.configureRequest();\n    this.configureResponse();\n  }\n\n  configureRequest() {\n    this.axios.interceptors.request.use(config => {\n      // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n      return new Promise(resolve => {\n        const interval = setInterval(() => {\n          if (this.pendingRequests < AxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS) {\n            this.pendingRequests++;\n            clearInterval(interval);\n            resolve(config);\n          }\n        }, AxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS);\n      });\n    });\n  }\n\n  configureResponse() {\n    this.axios.interceptors.response.use(response => {\n      this.pendingRequests = Math.max(0, this.pendingRequests - 1);\n      return Promise.resolve(response.data);\n    }, error => {\n      this.pendingRequests = Math.max(0, this.pendingRequests - 1);\n\n      if (!!error.response && !!error.response.data) {\n        if (error.response.status === 400) {\n          return Promise.reject(error.response.data);\n        } else {\n          return Promise.reject(error.response.data);\n        }\n      } else {\n        const errorCode = error.response && error.response.status || '500';\n        const defaultError = {\n          error: {\n            code: errorCode,\n            message: `Request failed. ${error}`\n          }\n        };\n        return Promise.reject(defaultError);\n      }\n    });\n  }\n\n}\n\nexports.AxisProvider = AxisProvider;\nAxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS = 15;\nAxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS = 10;","map":{"version":3,"sources":["C:/Users/Matias/Downloads/new/svy.finance/node_modules/@crowdin/crowdin-api-client/out/core/internal/axios/axiosProvider.js"],"names":["Object","defineProperty","exports","value","AxisProvider","axios_1","require","constructor","pendingRequests","axios","default","create","configureRequest","configureResponse","interceptors","request","use","config","Promise","resolve","interval","setInterval","CROWDIN_API_MAX_CONCURRENT_REQUESTS","clearInterval","CROWDIN_API_REQUESTS_INTERVAL_MS","response","Math","max","data","error","status","reject","errorCode","defaultError","code","message"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMF,YAAN,CAAmB;AACfG,EAAAA,WAAW,GAAG;AACV,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,KAAL,GAAaJ,OAAO,CAACK,OAAR,CAAgBC,MAAhB,CAAuB,EAAvB,CAAb;AACA,SAAKC,gBAAL;AACA,SAAKC,iBAAL;AACH;;AACDD,EAAAA,gBAAgB,GAAG;AACf,SAAKH,KAAL,CAAWK,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCC,MAAM,IAAI;AAC1C;AACA,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1B,cAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/B,cAAI,KAAKb,eAAL,GAAuBJ,YAAY,CAACkB,mCAAxC,EAA6E;AACzE,iBAAKd,eAAL;AACAe,YAAAA,aAAa,CAACH,QAAD,CAAb;AACAD,YAAAA,OAAO,CAACF,MAAD,CAAP;AACH;AACJ,SAN2B,EAMzBb,YAAY,CAACoB,gCANY,CAA5B;AAOH,OARM,CAAP;AASH,KAXD;AAYH;;AACDX,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,KAAL,CAAWK,YAAX,CAAwBW,QAAxB,CAAiCT,GAAjC,CAAqCS,QAAQ,IAAI;AAC7C,WAAKjB,eAAL,GAAuBkB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKnB,eAAL,GAAuB,CAAnC,CAAvB;AACA,aAAOU,OAAO,CAACC,OAAR,CAAgBM,QAAQ,CAACG,IAAzB,CAAP;AACH,KAHD,EAGGC,KAAK,IAAI;AACR,WAAKrB,eAAL,GAAuBkB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKnB,eAAL,GAAuB,CAAnC,CAAvB;;AACA,UAAI,CAAC,CAACqB,KAAK,CAACJ,QAAR,IAAoB,CAAC,CAACI,KAAK,CAACJ,QAAN,CAAeG,IAAzC,EAA+C;AAC3C,YAAIC,KAAK,CAACJ,QAAN,CAAeK,MAAf,KAA0B,GAA9B,EAAmC;AAC/B,iBAAOZ,OAAO,CAACa,MAAR,CAAeF,KAAK,CAACJ,QAAN,CAAeG,IAA9B,CAAP;AACH,SAFD,MAGK;AACD,iBAAOV,OAAO,CAACa,MAAR,CAAeF,KAAK,CAACJ,QAAN,CAAeG,IAA9B,CAAP;AACH;AACJ,OAPD,MAQK;AACD,cAAMI,SAAS,GAAIH,KAAK,CAACJ,QAAN,IAAkBI,KAAK,CAACJ,QAAN,CAAeK,MAAlC,IAA6C,KAA/D;AACA,cAAMG,YAAY,GAAG;AACjBJ,UAAAA,KAAK,EAAE;AACHK,YAAAA,IAAI,EAAEF,SADH;AAEHG,YAAAA,OAAO,EAAG,mBAAkBN,KAAM;AAF/B;AADU,SAArB;AAMA,eAAOX,OAAO,CAACa,MAAR,CAAeE,YAAf,CAAP;AACH;AACJ,KAvBD;AAwBH;;AA9Cc;;AAgDnB/B,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACAA,YAAY,CAACkB,mCAAb,GAAmD,EAAnD;AACAlB,YAAY,CAACoB,gCAAb,GAAgD,EAAhD","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AxisProvider = void 0;\r\nconst axios_1 = require(\"axios\");\r\nclass AxisProvider {\r\n    constructor() {\r\n        this.pendingRequests = 0;\r\n        this.axios = axios_1.default.create({});\r\n        this.configureRequest();\r\n        this.configureResponse();\r\n    }\r\n    configureRequest() {\r\n        this.axios.interceptors.request.use(config => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            return new Promise(resolve => {\r\n                const interval = setInterval(() => {\r\n                    if (this.pendingRequests < AxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS) {\r\n                        this.pendingRequests++;\r\n                        clearInterval(interval);\r\n                        resolve(config);\r\n                    }\r\n                }, AxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS);\r\n            });\r\n        });\r\n    }\r\n    configureResponse() {\r\n        this.axios.interceptors.response.use(response => {\r\n            this.pendingRequests = Math.max(0, this.pendingRequests - 1);\r\n            return Promise.resolve(response.data);\r\n        }, error => {\r\n            this.pendingRequests = Math.max(0, this.pendingRequests - 1);\r\n            if (!!error.response && !!error.response.data) {\r\n                if (error.response.status === 400) {\r\n                    return Promise.reject(error.response.data);\r\n                }\r\n                else {\r\n                    return Promise.reject(error.response.data);\r\n                }\r\n            }\r\n            else {\r\n                const errorCode = (error.response && error.response.status) || '500';\r\n                const defaultError = {\r\n                    error: {\r\n                        code: errorCode,\r\n                        message: `Request failed. ${error}`,\r\n                    },\r\n                };\r\n                return Promise.reject(defaultError);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.AxisProvider = AxisProvider;\r\nAxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS = 15;\r\nAxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS = 10;\r\n"]},"metadata":{},"sourceType":"script"}
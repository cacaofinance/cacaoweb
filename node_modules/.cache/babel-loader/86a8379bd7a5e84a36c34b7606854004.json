{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{request,gql}from'graphql-request';import{campaignMap}from'config/constants/campaigns';import{getAchievementTitle,getAchievementDescription}from'utils/achievements';var profileSubgraphApi=process.env.REACT_APP_SUBGRAPH_PROFILE;/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */export var getUserPointIncreaseEvents=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(profileSubgraphApi,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        {\\n          user(id: \\\"\",\"\\\") {\\n            points {\\n              id\\n              campaignId\\n              points\\n            }\\n          }\\n        }\\n      \"])),account.toLowerCase()));case 3:data=_context.sent;return _context.abrupt(\"return\",data.user.points);case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",null);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function getUserPointIncreaseEvents(_x){return _ref.apply(this,arguments);};}();/**\r\n * Gets all user point increase events and adds achievement meta\r\n */export var getAchievements=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var pointIncreaseEvents;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getUserPointIncreaseEvents(account);case 2:pointIncreaseEvents=_context2.sent;if(pointIncreaseEvents){_context2.next=5;break;}return _context2.abrupt(\"return\",[]);case 5:return _context2.abrupt(\"return\",pointIncreaseEvents.reduce(function(accum,userPoint){var campaignMeta=campaignMap.get(userPoint.campaignId);return[].concat(_toConsumableArray(accum),[{id:userPoint.campaignId,type:campaignMeta.type,address:userPoint.id,title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:Number(userPoint.points)}]);},[]));case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function getAchievements(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/Matias/Downloads/svy final/SPreace-frontend/src/state/achievements/helpers.ts"],"names":["request","gql","campaignMap","getAchievementTitle","getAchievementDescription","profileSubgraphApi","process","env","REACT_APP_SUBGRAPH_PROFILE","getUserPointIncreaseEvents","account","toLowerCase","data","user","points","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","campaignMeta","get","campaignId","id","type","address","title","description","badge","Number"],"mappings":"qtBAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CAEA,OAASC,mBAAT,CAA8BC,yBAA9B,KAA+D,oBAA/D,CAQA,GAAMC,CAAAA,kBAAkB,CAAGC,OAAO,CAACC,GAAR,CAAYC,0BAAvC,CAEA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,0BAA0B,0FAAG,iBAAOC,OAAP,iKAEnBV,CAAAA,OAAO,CACxBK,kBADwB,CAExBJ,GAFwB,kPAIRS,OAAO,CAACC,WAAR,EAJQ,EAFY,QAEhCC,IAFgC,+CAgB/BA,IAAI,CAACC,IAAL,CAAUC,MAhBqB,0FAkB/B,IAlB+B,sEAAH,kBAA1BL,CAAAA,0BAA0B,4CAAhC,CAsBP;AACA;AACA,GACA,MAAO,IAAMM,CAAAA,eAAe,2FAAG,kBAAOL,OAAP,qKACKD,CAAAA,0BAA0B,CAACC,OAAD,CAD/B,QACvBM,mBADuB,mBAGxBA,mBAHwB,2DAIpB,EAJoB,0CAOtBA,mBAAmB,CAACC,MAApB,CAA2B,SAACC,KAAD,CAAQC,SAAR,CAAsB,CACtD,GAAMC,CAAAA,YAAY,CAAGlB,WAAW,CAACmB,GAAZ,CAAgBF,SAAS,CAACG,UAA1B,CAArB,CAEA,mCACKJ,KADL,GAEE,CACEK,EAAE,CAAEJ,SAAS,CAACG,UADhB,CAEEE,IAAI,CAAEJ,YAAY,CAACI,IAFrB,CAGEC,OAAO,CAAEN,SAAS,CAACI,EAHrB,CAIEG,KAAK,CAAEvB,mBAAmB,CAACiB,YAAD,CAJ5B,CAKEO,WAAW,CAAEvB,yBAAyB,CAACgB,YAAD,CALxC,CAMEQ,KAAK,CAAER,YAAY,CAACQ,KANtB,CAOEd,MAAM,CAAEe,MAAM,CAACV,SAAS,CAACL,MAAX,CAPhB,CAFF,GAYD,CAfM,CAeJ,EAfI,CAPsB,0DAAH,kBAAfC,CAAAA,eAAe,8CAArB","sourcesContent":["import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\nconst profileSubgraphApi = process.env.REACT_APP_SUBGRAPH_PROFILE\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const data = await request(\r\n      profileSubgraphApi,\r\n      gql`\r\n        {\r\n          user(id: \"${account.toLowerCase()}\") {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n    )\r\n    return data.user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
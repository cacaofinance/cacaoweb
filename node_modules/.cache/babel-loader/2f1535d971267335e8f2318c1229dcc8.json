{"ast":null,"code":"// Set of helper functions to facilitate wallet setup\nimport { nodes } from './getRpcUrl';\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\n\nexport const setupNetwork = async () => {\n  const provider = window.ethereum;\n\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10);\n\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: `0x${chainId.toString(16)}`,\n          chainName: 'Binance Smart Chain Mainnet',\n          nativeCurrency: {\n            name: 'BNB',\n            symbol: 'bnb',\n            decimals: 18\n          },\n          rpcUrls: nodes,\n          blockExplorerUrls: ['https://bscscan.com/']\n        }]\n      });\n      return true;\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @param tokenImage\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\n\nexport const registerToken = async (tokenAddress, tokenSymbol, tokenDecimals, tokenImage) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: tokenImage\n      }\n    }\n  });\n  return tokenAdded;\n};","map":{"version":3,"sources":["C:/PROYECTOS/svy.finance/src/utils/wallet.ts"],"names":["nodes","setupNetwork","provider","window","ethereum","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","request","method","params","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","error","console","registerToken","tokenAddress","tokenSymbol","tokenDecimals","tokenImage","tokenAdded","type","options","address","image"],"mappings":"AAAA;AAEA,SAASA,KAAT,QAAsB,aAAtB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,YAAY;AACtC,QAAMC,QAAQ,GAAIC,MAAD,CAAwBC,QAAzC;;AACA,MAAIF,QAAJ,EAAc;AACZ,UAAMG,OAAO,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,EAAiC,EAAjC,CAAxB;;AACA,QAAI;AACF,YAAMP,QAAQ,CAACQ,OAAT,CAAiB;AACrBC,QAAAA,MAAM,EAAE,yBADa;AAErBC,QAAAA,MAAM,EAAE,CACN;AACEP,UAAAA,OAAO,EAAG,KAAIA,OAAO,CAACQ,QAAR,CAAiB,EAAjB,CAAqB,EADrC;AAEEC,UAAAA,SAAS,EAAE,6BAFb;AAGEC,UAAAA,cAAc,EAAE;AACdC,YAAAA,IAAI,EAAE,KADQ;AAEdC,YAAAA,MAAM,EAAE,KAFM;AAGdC,YAAAA,QAAQ,EAAE;AAHI,WAHlB;AAQEC,UAAAA,OAAO,EAAEnB,KARX;AASEoB,UAAAA,iBAAiB,EAAE,CAAC,sBAAD;AATrB,SADM;AAFa,OAAjB,CAAN;AAgBA,aAAO,IAAP;AACD,KAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAO,KAAP;AACD;AACF,GAxBD,MAwBO;AACLC,IAAAA,OAAO,CAACD,KAAR,CAAc,8EAAd;AACA,WAAO,KAAP;AACD;AACF,CA9BM;AAgCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,aAAa,GAAG,OAC3BC,YAD2B,EAE3BC,WAF2B,EAG3BC,aAH2B,EAI3BC,UAJ2B,KAKxB;AACH,QAAMC,UAAU,GAAG,MAAOzB,MAAD,CAAwBC,QAAxB,CAAiCM,OAAjC,CAAyC;AAChEC,IAAAA,MAAM,EAAE,mBADwD;AAEhEC,IAAAA,MAAM,EAAE;AACNiB,MAAAA,IAAI,EAAE,OADA;AAENC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAEP,YADF;AAEPP,QAAAA,MAAM,EAAEQ,WAFD;AAGPP,QAAAA,QAAQ,EAAEQ,aAHH;AAIPM,QAAAA,KAAK,EAAEL;AAJA;AAFH;AAFwD,GAAzC,CAAzB;AAaA,SAAOC,UAAP;AACD,CApBM","sourcesContent":["// Set of helper functions to facilitate wallet setup\r\n\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = (window as WindowChain).ethereum\r\n  if (provider) {\r\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n            chainName: 'Binance Smart Chain Mainnet',\r\n            nativeCurrency: {\r\n              name: 'BNB',\r\n              symbol: 'bnb',\r\n              decimals: 18,\r\n            },\r\n            rpcUrls: nodes,\r\n            blockExplorerUrls: ['https://bscscan.com/'],\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error(error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @param tokenImage\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (\r\n  tokenAddress: string,\r\n  tokenSymbol: string,\r\n  tokenDecimals: number,\r\n  tokenImage: string,\r\n) => {\r\n  const tokenAdded = await (window as WindowChain).ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: tokenImage,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
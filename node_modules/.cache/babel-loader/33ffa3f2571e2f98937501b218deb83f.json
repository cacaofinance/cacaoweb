{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GlossariesModel = exports.Glossaries = void 0;\n\nconst core_1 = require(\"../core\");\n\nclass Glossaries extends core_1.CrowdinApi {\n  /**\r\n   * @param groupId group identifier\r\n   * @param limit maximum number of items to retrieve (default 25)\r\n   * @param offset starting offset in the collection (default 0)\r\n   */\n  listGlossaries(groupId, limit, offset) {\n    let url = `${this.url}/glossaries`;\n    url = this.addQueryParam(url, 'groupId', groupId);\n    return this.getList(url, limit, offset);\n  }\n  /**\r\n   * @param request request body\r\n   */\n\n\n  addGlossary(request) {\n    const url = `${this.url}/glossaries`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   */\n\n\n  getGlossary(glossaryId) {\n    const url = `${this.url}/glossaries/${glossaryId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   */\n\n\n  deleteGlossary(glossaryId) {\n    const url = `${this.url}/glossaries/${glossaryId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param request request body\r\n   */\n\n\n  editGlossary(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param request request body\r\n   */\n\n\n  exportGlossary(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/exports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param exportId export identifier\r\n   */\n\n\n  downloadGlossary(glossaryId, exportId) {\n    const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}/download`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param exportId export identifier\r\n   */\n\n\n  checkGlossaryExportStatus(glossaryId, exportId) {\n    const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param request request body\r\n   */\n\n\n  importGlossaryFile(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/imports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param importId import identifier\r\n   */\n\n\n  checkGlossaryImportStatus(glossaryId, importId) {\n    const url = `${this.url}/glossaries/${glossaryId}/imports/${importId}`;\n    return this.get(url, this.defaultConfig());\n  }\n\n  listTerms(glossaryId, userIdOrRequest, limit, offset, languageId, translationOfTermId) {\n    let url = `${this.url}/glossaries/${glossaryId}/terms`;\n    let request;\n\n    if (userIdOrRequest && typeof userIdOrRequest === 'object') {\n      request = userIdOrRequest;\n    } else {\n      request = {\n        userId: userIdOrRequest,\n        limit,\n        offset,\n        languageId,\n        translationOfTermId\n      };\n    }\n\n    url = this.addQueryParam(url, 'userId', request.userId);\n    url = this.addQueryParam(url, 'languageId', request.languageId);\n    url = this.addQueryParam(url, 'translationOfTermId', request.translationOfTermId);\n    return this.getList(url, request.limit, request.offset);\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param request request body\r\n   */\n\n\n  addTerm(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param languageId languageId identifier\r\n   * @param translationOfTermId term translation identifier\r\n   */\n\n\n  clearGlossary(glossaryId, languageId, translationOfTermId) {\n    let url = `${this.url}/glossaries/${glossaryId}/terms`;\n    url = this.addQueryParam(url, 'languageId', languageId);\n    url = this.addQueryParam(url, 'translationOfTermId', translationOfTermId);\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param termId term identifier\r\n   */\n\n\n  getTerm(glossaryId, termId) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param termId term identifier\r\n   */\n\n\n  deleteTerm(glossaryId, termId) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\r\n   * @param glossaryId glossary identifier\r\n   * @param termId term identifier\r\n   * @param request request body\r\n   */\n\n\n  editTerm(glossaryId, termId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n\n}\n\nexports.Glossaries = Glossaries;\nvar GlossariesModel;\n\n(function (GlossariesModel) {\n  let GlossaryFormat;\n\n  (function (GlossaryFormat) {\n    GlossaryFormat[\"TBX\"] = \"tbx\";\n    GlossaryFormat[\"CSV\"] = \"csv\";\n    GlossaryFormat[\"XLSX\"] = \"xlsx\";\n  })(GlossaryFormat = GlossariesModel.GlossaryFormat || (GlossariesModel.GlossaryFormat = {}));\n\n  let PartOfSpeech;\n\n  (function (PartOfSpeech) {\n    PartOfSpeech[\"ADJECTIVE\"] = \"adjective\";\n    PartOfSpeech[\"ADPOSITION\"] = \"adposition\";\n    PartOfSpeech[\"ADVERB\"] = \"adverb\";\n    PartOfSpeech[\"AUXILIARY\"] = \"auxiliary\";\n    PartOfSpeech[\"COORDINATING_CONJUNCTION\"] = \"coordinating conjunction\";\n    PartOfSpeech[\"DETERMINER\"] = \"determiner\";\n    PartOfSpeech[\"INTERJECTION\"] = \"interjection\";\n    PartOfSpeech[\"NOUN\"] = \"noun\";\n    PartOfSpeech[\"NUMERAL\"] = \"numeral\";\n    PartOfSpeech[\"PARTICLE\"] = \"particle\";\n    PartOfSpeech[\"PRONOUN\"] = \"pronoun\";\n    PartOfSpeech[\"PROPER_NOUN\"] = \"proper noun\";\n    PartOfSpeech[\"SUBORDINATING_CONJUNCTION\"] = \"subordinating conjunction\";\n    PartOfSpeech[\"VERB\"] = \"verb\";\n    PartOfSpeech[\"OTHER\"] = \"other\";\n  })(PartOfSpeech = GlossariesModel.PartOfSpeech || (GlossariesModel.PartOfSpeech = {}));\n})(GlossariesModel = exports.GlossariesModel || (exports.GlossariesModel = {}));","map":{"version":3,"sources":["C:/Users/Matias/Downloads/new/svy.finance/node_modules/@crowdin/crowdin-api-client/out/glossaries/index.js"],"names":["Object","defineProperty","exports","value","GlossariesModel","Glossaries","core_1","require","CrowdinApi","listGlossaries","groupId","limit","offset","url","addQueryParam","getList","addGlossary","request","post","defaultConfig","getGlossary","glossaryId","get","deleteGlossary","delete","editGlossary","patch","exportGlossary","downloadGlossary","exportId","checkGlossaryExportStatus","importGlossaryFile","checkGlossaryImportStatus","importId","listTerms","userIdOrRequest","languageId","translationOfTermId","userId","addTerm","clearGlossary","getTerm","termId","deleteTerm","editTerm","GlossaryFormat","PartOfSpeech"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GlossariesModel = exports.Glossaries = void 0;\r\nconst core_1 = require(\"../core\");\r\nclass Glossaries extends core_1.CrowdinApi {\r\n    /**\r\n     * @param groupId group identifier\r\n     * @param limit maximum number of items to retrieve (default 25)\r\n     * @param offset starting offset in the collection (default 0)\r\n     */\r\n    listGlossaries(groupId, limit, offset) {\r\n        let url = `${this.url}/glossaries`;\r\n        url = this.addQueryParam(url, 'groupId', groupId);\r\n        return this.getList(url, limit, offset);\r\n    }\r\n    /**\r\n     * @param request request body\r\n     */\r\n    addGlossary(request) {\r\n        const url = `${this.url}/glossaries`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     */\r\n    getGlossary(glossaryId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     */\r\n    deleteGlossary(glossaryId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}`;\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param request request body\r\n     */\r\n    editGlossary(glossaryId, request) {\r\n        const url = `${this.url}/glossaries/${glossaryId}`;\r\n        return this.patch(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param request request body\r\n     */\r\n    exportGlossary(glossaryId, request) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/exports`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param exportId export identifier\r\n     */\r\n    downloadGlossary(glossaryId, exportId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}/download`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param exportId export identifier\r\n     */\r\n    checkGlossaryExportStatus(glossaryId, exportId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param request request body\r\n     */\r\n    importGlossaryFile(glossaryId, request) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/imports`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param importId import identifier\r\n     */\r\n    checkGlossaryImportStatus(glossaryId, importId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/imports/${importId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    listTerms(glossaryId, userIdOrRequest, limit, offset, languageId, translationOfTermId) {\r\n        let url = `${this.url}/glossaries/${glossaryId}/terms`;\r\n        let request;\r\n        if (userIdOrRequest && typeof userIdOrRequest === 'object') {\r\n            request = userIdOrRequest;\r\n        }\r\n        else {\r\n            request = { userId: userIdOrRequest, limit, offset, languageId, translationOfTermId };\r\n        }\r\n        url = this.addQueryParam(url, 'userId', request.userId);\r\n        url = this.addQueryParam(url, 'languageId', request.languageId);\r\n        url = this.addQueryParam(url, 'translationOfTermId', request.translationOfTermId);\r\n        return this.getList(url, request.limit, request.offset);\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param request request body\r\n     */\r\n    addTerm(glossaryId, request) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/terms`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param languageId languageId identifier\r\n     * @param translationOfTermId term translation identifier\r\n     */\r\n    clearGlossary(glossaryId, languageId, translationOfTermId) {\r\n        let url = `${this.url}/glossaries/${glossaryId}/terms`;\r\n        url = this.addQueryParam(url, 'languageId', languageId);\r\n        url = this.addQueryParam(url, 'translationOfTermId', translationOfTermId);\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param termId term identifier\r\n     */\r\n    getTerm(glossaryId, termId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param termId term identifier\r\n     */\r\n    deleteTerm(glossaryId, termId) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param glossaryId glossary identifier\r\n     * @param termId term identifier\r\n     * @param request request body\r\n     */\r\n    editTerm(glossaryId, termId, request) {\r\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\r\n        return this.patch(url, request, this.defaultConfig());\r\n    }\r\n}\r\nexports.Glossaries = Glossaries;\r\nvar GlossariesModel;\r\n(function (GlossariesModel) {\r\n    let GlossaryFormat;\r\n    (function (GlossaryFormat) {\r\n        GlossaryFormat[\"TBX\"] = \"tbx\";\r\n        GlossaryFormat[\"CSV\"] = \"csv\";\r\n        GlossaryFormat[\"XLSX\"] = \"xlsx\";\r\n    })(GlossaryFormat = GlossariesModel.GlossaryFormat || (GlossariesModel.GlossaryFormat = {}));\r\n    let PartOfSpeech;\r\n    (function (PartOfSpeech) {\r\n        PartOfSpeech[\"ADJECTIVE\"] = \"adjective\";\r\n        PartOfSpeech[\"ADPOSITION\"] = \"adposition\";\r\n        PartOfSpeech[\"ADVERB\"] = \"adverb\";\r\n        PartOfSpeech[\"AUXILIARY\"] = \"auxiliary\";\r\n        PartOfSpeech[\"COORDINATING_CONJUNCTION\"] = \"coordinating conjunction\";\r\n        PartOfSpeech[\"DETERMINER\"] = \"determiner\";\r\n        PartOfSpeech[\"INTERJECTION\"] = \"interjection\";\r\n        PartOfSpeech[\"NOUN\"] = \"noun\";\r\n        PartOfSpeech[\"NUMERAL\"] = \"numeral\";\r\n        PartOfSpeech[\"PARTICLE\"] = \"particle\";\r\n        PartOfSpeech[\"PRONOUN\"] = \"pronoun\";\r\n        PartOfSpeech[\"PROPER_NOUN\"] = \"proper noun\";\r\n        PartOfSpeech[\"SUBORDINATING_CONJUNCTION\"] = \"subordinating conjunction\";\r\n        PartOfSpeech[\"VERB\"] = \"verb\";\r\n        PartOfSpeech[\"OTHER\"] = \"other\";\r\n    })(PartOfSpeech = GlossariesModel.PartOfSpeech || (GlossariesModel.PartOfSpeech = {}));\r\n})(GlossariesModel = exports.GlossariesModel || (exports.GlossariesModel = {}));\r\n"]},"metadata":{},"sourceType":"script"}
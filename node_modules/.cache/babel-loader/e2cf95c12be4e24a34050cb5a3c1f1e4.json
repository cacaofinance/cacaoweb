{"ast":null,"code":"import{getWeb3NoAccount}from'./web3';/**\r\n * Accepts an array of contract method calls and batches them\r\n *\r\n * Example:\r\n *\r\n * [\r\n *  contract.method.balanceOf().call,\r\n *  contract.method.startBlockNumber().call\r\n * ]\r\n */var makeBatchRequest=function makeBatchRequest(calls){try{var web3=getWeb3NoAccount();var batch=new web3.BatchRequest();var promises=calls.map(function(call){return new Promise(function(resolve,reject){batch.add(call.request({},function(err,result){if(err){reject(err);}else{resolve(result);}}));});});batch.execute();return Promise.all(promises);}catch(_unused){return null;}};export default makeBatchRequest;","map":{"version":3,"sources":["C:/Users/Matias/Downloads/svy final/SPreace-frontend/src/utils/makeBatchRequest.ts"],"names":["getWeb3NoAccount","makeBatchRequest","calls","web3","batch","BatchRequest","promises","map","call","Promise","resolve","reject","add","request","err","result","execute","all"],"mappings":"AAAA,OAASA,gBAAT,KAAiC,QAAjC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAkB,CACzC,GAAI,CACF,GAAMC,CAAAA,IAAI,CAAGH,gBAAgB,EAA7B,CACA,GAAMI,CAAAA,KAAK,CAAG,GAAID,CAAAA,IAAI,CAACE,YAAT,EAAd,CAEA,GAAMC,CAAAA,QAAQ,CAAGJ,KAAK,CAACK,GAAN,CAAU,SAACC,IAAD,CAAU,CACnC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCP,KAAK,CAACQ,GAAN,CACEJ,IAAI,CAACK,OAAL,CAAa,EAAb,CAAiB,SAACC,GAAD,CAAMC,MAAN,CAAiB,CAChC,GAAID,GAAJ,CAAS,CACPH,MAAM,CAACG,GAAD,CAAN,CACD,CAFD,IAEO,CACLJ,OAAO,CAACK,MAAD,CAAP,CACD,CACF,CAND,CADF,EASD,CAVM,CAAP,CAWD,CAZgB,CAAjB,CAcAX,KAAK,CAACY,OAAN,GAEA,MAAOP,CAAAA,OAAO,CAACQ,GAAR,CAAYX,QAAZ,CAAP,CACD,CAAC,cAAM,CACN,MAAO,KAAP,CACD,CACF,CAzBD,CA2BA,cAAeL,CAAAA,gBAAf","sourcesContent":["import { getWeb3NoAccount } from './web3'\r\n\r\n/**\r\n * Accepts an array of contract method calls and batches them\r\n *\r\n * Example:\r\n *\r\n * [\r\n *  contract.method.balanceOf().call,\r\n *  contract.method.startBlockNumber().call\r\n * ]\r\n */\r\nconst makeBatchRequest = (calls: any[]) => {\r\n  try {\r\n    const web3 = getWeb3NoAccount()\r\n    const batch = new web3.BatchRequest()\r\n\r\n    const promises = calls.map((call) => {\r\n      return new Promise((resolve, reject) => {\r\n        batch.add(\r\n          call.request({}, (err, result) => {\r\n            if (err) {\r\n              reject(err)\r\n            } else {\r\n              resolve(result)\r\n            }\r\n          }),\r\n        )\r\n      })\r\n    })\r\n\r\n    batch.execute()\r\n\r\n    return Promise.all(promises)\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default makeBatchRequest\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(farmsConfig.map(async farmConfig => {\n    const lpAdress = getAddress(farmConfig.lpAddresses);\n    const calls = [// Balance of token in the LP contract\n    {\n      address: getAddress(farmConfig.tokenAddresses),\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of quote token on LP contract\n    {\n      address: getAddress(farmConfig.quoteTokenAdresses),\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: getAddress(farmConfig.tokenAddresses),\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: getAddress(farmConfig.quoteTokenAdresses),\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls); // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n    const lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(18)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n    const tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n    const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n    const [info, totalAllocPoint] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      quoteTokenAmount: quoteTokenAmount.toJSON(),\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\n      poolWeight: poolWeight.toJSON(),\n      multiplier: `${allocPoint.div(100).toString()}X`\n    };\n  }));\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["C:/PROYECTOS/svy.finance/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getAddress","getMasterChefAddress","farmsConfig","fetchFarms","data","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","lpTotalInQuoteToken","pow","times","tokenAmount","quoteTokenAmount","info","totalAllocPoint","pid","allocPoint","_hex","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = getAddress(farmConfig.lpAddresses)\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: getAddress(farmConfig.tokenAddresses),\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: getAddress(farmConfig.quoteTokenAdresses),\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: getAddress(farmConfig.tokenAddresses),\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: getAddress(farmConfig.quoteTokenAdresses),\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals,\r\n      ] = await multicall(erc20, calls)\r\n\r\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n      // Total value in staking in quote token value\r\n      const lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n        .div(new BigNumber(10).pow(18))\r\n        .times(new BigNumber(2))\r\n        .times(lpTokenRatio)\r\n\r\n      // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n      const tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n        .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n        .times(lpTokenRatio)\r\n\r\n      const [info, totalAllocPoint] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\r\n        poolWeight: poolWeight.toJSON(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}
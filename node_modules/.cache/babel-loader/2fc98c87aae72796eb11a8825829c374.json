{"ast":null,"code":"import _classCallCheck from \"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * var basex = require(\"base-x\");\r\n *\r\n * This implementation is heavily based on base-x. The main reason to\r\n * deviate was to prevent the dependency of Buffer.\r\n *\r\n * Contributors:\r\n *\r\n * base-x encoding\r\n * Forked from https://github.com/cryptocoinjs/bs58\r\n * Originally written by Mike Hearn for BitcoinJ\r\n * Copyright (c) 2011 Google Inc\r\n * Ported to JavaScript by Stefan Thomas\r\n * Merged Buffer refactorings from base58-native by Stephen Pair\r\n * Copyright (c) 2013 BitPay Inc\r\n *\r\n * The MIT License (MIT)\r\n *\r\n * Copyright base-x contributors (c) 2016\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n *\r\n */\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nexport var BaseX = /*#__PURE__*/function () {\n  function BaseX(alphabet) {\n    _classCallCheck(this, BaseX);\n\n    defineReadOnly(this, \"alphabet\", alphabet);\n    defineReadOnly(this, \"base\", alphabet.length);\n    defineReadOnly(this, \"_alphabetMap\", {});\n    defineReadOnly(this, \"_leader\", alphabet.charAt(0)); // pre-compute lookup table\n\n    for (var i = 0; i < alphabet.length; i++) {\n      this._alphabetMap[alphabet.charAt(i)] = i;\n    }\n  }\n\n  _createClass(BaseX, [{\n    key: \"encode\",\n    value: function encode(value) {\n      var source = arrayify(value);\n\n      if (source.length === 0) {\n        return \"\";\n      }\n\n      var digits = [0];\n\n      for (var i = 0; i < source.length; ++i) {\n        var carry = source[i];\n\n        for (var j = 0; j < digits.length; ++j) {\n          carry += digits[j] << 8;\n          digits[j] = carry % this.base;\n          carry = carry / this.base | 0;\n        }\n\n        while (carry > 0) {\n          digits.push(carry % this.base);\n          carry = carry / this.base | 0;\n        }\n      }\n\n      var string = \"\"; // deal with leading zeros\n\n      for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n        string += this._leader;\n      } // convert digits to a string\n\n\n      for (var q = digits.length - 1; q >= 0; --q) {\n        string += this.alphabet[digits[q]];\n      }\n\n      return string;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(value) {\n      if (typeof value !== \"string\") {\n        throw new TypeError(\"Expected String\");\n      }\n\n      var bytes = [];\n\n      if (value.length === 0) {\n        return new Uint8Array(bytes);\n      }\n\n      bytes.push(0);\n\n      for (var i = 0; i < value.length; i++) {\n        var byte = this._alphabetMap[value[i]];\n\n        if (byte === undefined) {\n          throw new Error(\"Non-base\" + this.base + \" character\");\n        }\n\n        var carry = byte;\n\n        for (var j = 0; j < bytes.length; ++j) {\n          carry += bytes[j] * this.base;\n          bytes[j] = carry & 0xff;\n          carry >>= 8;\n        }\n\n        while (carry > 0) {\n          bytes.push(carry & 0xff);\n          carry >>= 8;\n        }\n      } // deal with leading zeros\n\n\n      for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n        bytes.push(0);\n      }\n\n      return arrayify(new Uint8Array(bytes.reverse()));\n    }\n  }]);\n\n  return BaseX;\n}();\nvar Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nvar Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexport { Base32, Base58 }; //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * var basex = require(\"base-x\");\r\n *\r\n * This implementation is heavily based on base-x. The main reason to\r\n * deviate was to prevent the dependency of Buffer.\r\n *\r\n * Contributors:\r\n *\r\n * base-x encoding\r\n * Forked from https://github.com/cryptocoinjs/bs58\r\n * Originally written by Mike Hearn for BitcoinJ\r\n * Copyright (c) 2011 Google Inc\r\n * Ported to JavaScript by Stefan Thomas\r\n * Merged Buffer refactorings from base58-native by Stephen Pair\r\n * Copyright (c) 2013 BitPay Inc\r\n *\r\n * The MIT License (MIT)\r\n *\r\n * Copyright base-x contributors (c) 2016\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n *\r\n */\r\nimport { arrayify } from \"@ethersproject/bytes\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nexport class BaseX {\r\n    constructor(alphabet) {\r\n        defineReadOnly(this, \"alphabet\", alphabet);\r\n        defineReadOnly(this, \"base\", alphabet.length);\r\n        defineReadOnly(this, \"_alphabetMap\", {});\r\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\r\n        // pre-compute lookup table\r\n        for (let i = 0; i < alphabet.length; i++) {\r\n            this._alphabetMap[alphabet.charAt(i)] = i;\r\n        }\r\n    }\r\n    encode(value) {\r\n        let source = arrayify(value);\r\n        if (source.length === 0) {\r\n            return \"\";\r\n        }\r\n        let digits = [0];\r\n        for (let i = 0; i < source.length; ++i) {\r\n            let carry = source[i];\r\n            for (let j = 0; j < digits.length; ++j) {\r\n                carry += digits[j] << 8;\r\n                digits[j] = carry % this.base;\r\n                carry = (carry / this.base) | 0;\r\n            }\r\n            while (carry > 0) {\r\n                digits.push(carry % this.base);\r\n                carry = (carry / this.base) | 0;\r\n            }\r\n        }\r\n        let string = \"\";\r\n        // deal with leading zeros\r\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\r\n            string += this._leader;\r\n        }\r\n        // convert digits to a string\r\n        for (let q = digits.length - 1; q >= 0; --q) {\r\n            string += this.alphabet[digits[q]];\r\n        }\r\n        return string;\r\n    }\r\n    decode(value) {\r\n        if (typeof (value) !== \"string\") {\r\n            throw new TypeError(\"Expected String\");\r\n        }\r\n        let bytes = [];\r\n        if (value.length === 0) {\r\n            return new Uint8Array(bytes);\r\n        }\r\n        bytes.push(0);\r\n        for (let i = 0; i < value.length; i++) {\r\n            let byte = this._alphabetMap[value[i]];\r\n            if (byte === undefined) {\r\n                throw new Error(\"Non-base\" + this.base + \" character\");\r\n            }\r\n            let carry = byte;\r\n            for (let j = 0; j < bytes.length; ++j) {\r\n                carry += bytes[j] * this.base;\r\n                bytes[j] = carry & 0xff;\r\n                carry >>= 8;\r\n            }\r\n            while (carry > 0) {\r\n                bytes.push(carry & 0xff);\r\n                carry >>= 8;\r\n            }\r\n        }\r\n        // deal with leading zeros\r\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\r\n            bytes.push(0);\r\n        }\r\n        return arrayify(new Uint8Array(bytes.reverse()));\r\n    }\r\n}\r\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\r\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\r\nexport { Base32, Base58 };\r\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\r\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}
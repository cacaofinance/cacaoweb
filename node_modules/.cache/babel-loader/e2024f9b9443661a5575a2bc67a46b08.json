{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { campaignMap } from 'config/constants/campaigns';\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements';\nconst profileSubgraphApi = process.env.REACT_APP_SUBGRAPH_PROFILE;\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\n\nexport const getUserPointIncreaseEvents = async account => {\n  try {\n    const data = await request(profileSubgraphApi, gql`\n        {\n          user(id: \"${account.toLowerCase()}\") {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `);\n    return data.user.points;\n  } catch (error) {\n    return null;\n  }\n};\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\n\nexport const getAchievements = async account => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account);\n\n  if (!pointIncreaseEvents) {\n    return [];\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    const campaignMeta = campaignMap.get(userPoint.campaignId);\n    return [...accum, {\n      id: userPoint.campaignId,\n      type: campaignMeta.type,\n      address: userPoint.id,\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(userPoint.points)\n    }];\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/Matias/Downloads/svy final/SPreace-frontend/src/state/achievements/helpers.ts"],"names":["request","gql","campaignMap","getAchievementTitle","getAchievementDescription","profileSubgraphApi","process","env","REACT_APP_SUBGRAPH_PROFILE","getUserPointIncreaseEvents","account","data","toLowerCase","user","points","error","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","campaignMeta","get","campaignId","id","type","address","title","description","badge","Number"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,SAASC,mBAAT,EAA8BC,yBAA9B,QAA+D,oBAA/D;AAQA,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAAvC;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,OAAP,IAA8D;AACtG,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMX,OAAO,CACxBK,kBADwB,EAExBJ,GAAI;AACV;AACA,sBAAsBS,OAAO,CAACE,WAAR,EAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZ8B,CAA1B;AAcA,WAAOD,IAAI,CAACE,IAAL,CAAUC,MAAjB;AACD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CApBM;AAsBP;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAON,OAAP,IAAmD;AAChF,QAAMO,mBAAmB,GAAG,MAAMR,0BAA0B,CAACC,OAAD,CAA5D;;AAEA,MAAI,CAACO,mBAAL,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,SAAOA,mBAAmB,CAACC,MAApB,CAA2B,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtD,UAAMC,YAAY,GAAGnB,WAAW,CAACoB,GAAZ,CAAgBF,SAAS,CAACG,UAA1B,CAArB;AAEA,WAAO,CACL,GAAGJ,KADE,EAEL;AACEK,MAAAA,EAAE,EAAEJ,SAAS,CAACG,UADhB;AAEEE,MAAAA,IAAI,EAAEJ,YAAY,CAACI,IAFrB;AAGEC,MAAAA,OAAO,EAAEN,SAAS,CAACI,EAHrB;AAIEG,MAAAA,KAAK,EAAExB,mBAAmB,CAACkB,YAAD,CAJ5B;AAKEO,MAAAA,WAAW,EAAExB,yBAAyB,CAACiB,YAAD,CALxC;AAMEQ,MAAAA,KAAK,EAAER,YAAY,CAACQ,KANtB;AAOEf,MAAAA,MAAM,EAAEgB,MAAM,CAACV,SAAS,CAACN,MAAX;AAPhB,KAFK,CAAP;AAYD,GAfM,EAeJ,EAfI,CAAP;AAgBD,CAvBM","sourcesContent":["import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\nconst profileSubgraphApi = process.env.REACT_APP_SUBGRAPH_PROFILE\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const data = await request(\r\n      profileSubgraphApi,\r\n      gql`\r\n        {\r\n          user(id: \"${account.toLowerCase()}\") {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n    )\r\n    return data.user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/Matias/Downloads/svy final/SPreace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import erc20 from'config/abi/erc20.json';import masterchefABI from'config/abi/masterchef.json';import multicall from'utils/multicall';import{getAddress,getMasterChefAddress}from'utils/addressHelpers';import farmsConfig from'config/constants/farms';var fetchFarms=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Promise.all(farmsConfig.map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farmConfig){var lpAdress,calls,_yield$multicall,_yield$multicall2,tokenBalanceLP,quoteTokenBlanceLP,lpTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals,lpTokenRatio,lpTotalInQuoteToken,tokenAmount,quoteTokenAmount,_yield$multicall3,_yield$multicall4,info,totalAllocPoint,allocPoint,poolWeight;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lpAdress=getAddress(farmConfig.lpAddresses);calls=[// Balance of token in the LP contract\n{address:getAddress(farmConfig.tokenAddresses),name:'balanceOf',params:[lpAdress]},// Balance of quote token on LP contract\n{address:getAddress(farmConfig.quoteTokenAdresses),name:'balanceOf',params:[lpAdress]},// Balance of LP tokens in the master chef contract\n{address:lpAdress,name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAdress,name:'totalSupply'},// Token decimals\n{address:getAddress(farmConfig.tokenAddresses),name:'decimals'},// Quote token decimals\n{address:getAddress(farmConfig.quoteTokenAdresses),name:'decimals'}];_context.next=4;return multicall(erc20,calls);case 4:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,6);tokenBalanceLP=_yield$multicall2[0];quoteTokenBlanceLP=_yield$multicall2[1];lpTokenBalanceMC=_yield$multicall2[2];lpTotalSupply=_yield$multicall2[3];tokenDecimals=_yield$multicall2[4];quoteTokenDecimals=_yield$multicall2[5];// Ratio in % a LP tokens that are in staking, vs the total number in circulation\nlpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Total value in staking in quote token value\nlpTotalInQuoteToken=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(18)).times(new BigNumber(2)).times(lpTokenRatio);// Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\ntokenAmount=new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);quoteTokenAmount=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);_context.next=18;return multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[farmConfig.pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'}]);case 18:_yield$multicall3=_context.sent;_yield$multicall4=_slicedToArray(_yield$multicall3,2);info=_yield$multicall4[0];totalAllocPoint=_yield$multicall4[1];allocPoint=new BigNumber(info.allocPoint._hex);poolWeight=allocPoint.div(new BigNumber(totalAllocPoint));return _context.abrupt(\"return\",_objectSpread(_objectSpread({},farmConfig),{},{tokenAmount:tokenAmount.toJSON(),quoteTokenAmount:quoteTokenAmount.toJSON(),lpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:quoteTokenAmount.div(tokenAmount).toJSON(),poolWeight:poolWeight.toJSON(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\")}));case 25:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}()));case 2:data=_context2.sent;return _context2.abrupt(\"return\",data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchFarms(){return _ref.apply(this,arguments);};}();export default fetchFarms;","map":{"version":3,"sources":["C:/Users/Matias/Downloads/svy final/SPreace-frontend/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getAddress","getMasterChefAddress","farmsConfig","fetchFarms","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","lpTotalInQuoteToken","pow","times","tokenAmount","quoteTokenAmount","pid","info","totalAllocPoint","allocPoint","_hex","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString","data"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = getAddress(farmConfig.lpAddresses)\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: getAddress(farmConfig.tokenAddresses),\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: getAddress(farmConfig.quoteTokenAdresses),\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: getAddress(farmConfig.tokenAddresses),\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: getAddress(farmConfig.quoteTokenAdresses),\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals,\r\n      ] = await multicall(erc20, calls)\r\n\r\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n      // Total value in staking in quote token value\r\n      const lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n        .div(new BigNumber(10).pow(18))\r\n        .times(new BigNumber(2))\r\n        .times(lpTokenRatio)\r\n\r\n      // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n      const tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n        .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n        .times(lpTokenRatio)\r\n\r\n      const [info, totalAllocPoint] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\r\n        poolWeight: poolWeight.toJSON(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}
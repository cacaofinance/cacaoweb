{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringCommentsModel = exports.StringComments = void 0;\n\nconst core_1 = require(\"../core\");\n\nclass StringComments extends core_1.CrowdinApi {\n  listStringComments(projectId, stringIdOrRequest, type, targetLanguageId, issueType, issueStatus) {\n    let url = `${this.url}/projects/${projectId}/comments`;\n    let request;\n\n    if (stringIdOrRequest && typeof stringIdOrRequest === 'object') {\n      request = stringIdOrRequest;\n    } else {\n      request = {\n        stringId: stringIdOrRequest,\n        type,\n        targetLanguageId,\n        issueStatus,\n        issueType\n      };\n    }\n\n    url = this.addQueryParam(url, 'stringId', request.stringId);\n    url = this.addQueryParam(url, 'type', request.type);\n    url = this.addQueryParam(url, 'targetLanguageId', request.targetLanguageId);\n    url = this.addQueryParam(url, 'issueType', request.issueType);\n    url = this.addQueryParam(url, 'issueStatus', request.issueStatus);\n    return this.getList(url, request.limit, request.offset);\n  }\n  /**\r\n   * @param projectId project identifier\r\n   * @param request request body\r\n   */\n\n\n  addStringComment(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/comments`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\r\n   * @param projectId project identifier\r\n   * @param stringCommentId string comment identifier\r\n   */\n\n\n  getStringComment(projectId, stringCommentId) {\n    const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\r\n   * @param projectId project identifier\r\n   * @param stringCommentId string comment identifier\r\n   */\n\n\n  deleteStringComment(projectId, stringCommentId) {\n    const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\r\n   * @param projectId project identifier\r\n   * @param stringCommentId string comment identifier\r\n   * @param request request body\r\n   */\n\n\n  editStringComment(projectId, stringCommentId, request) {\n    const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n\n}\n\nexports.StringComments = StringComments;\nvar StringCommentsModel;\n\n(function (StringCommentsModel) {\n  let Type;\n\n  (function (Type) {\n    Type[\"COMMENT\"] = \"comment\";\n    Type[\"ISSUE\"] = \"issue\";\n  })(Type = StringCommentsModel.Type || (StringCommentsModel.Type = {}));\n\n  let IssueType;\n\n  (function (IssueType) {\n    IssueType[\"GENERAL_QUESTION\"] = \"general_question\";\n    IssueType[\"TRANSLATION_MISTAKE\"] = \"translation_mistake\";\n    IssueType[\"CONTEXT_REQUEST\"] = \"context_request\";\n    IssueType[\"SOURCE_MISTAKE\"] = \"source_mistake\";\n  })(IssueType = StringCommentsModel.IssueType || (StringCommentsModel.IssueType = {}));\n\n  let IssueStatus;\n\n  (function (IssueStatus) {\n    IssueStatus[\"UNRESOLVED\"] = \"unresolved\";\n    IssueStatus[\"RESOLVED\"] = \"resolved\";\n  })(IssueStatus = StringCommentsModel.IssueStatus || (StringCommentsModel.IssueStatus = {}));\n})(StringCommentsModel = exports.StringCommentsModel || (exports.StringCommentsModel = {}));","map":{"version":3,"sources":["C:/Users/Matias/Downloads/new/svy.finance/node_modules/@crowdin/crowdin-api-client/out/stringComments/index.js"],"names":["Object","defineProperty","exports","value","StringCommentsModel","StringComments","core_1","require","CrowdinApi","listStringComments","projectId","stringIdOrRequest","type","targetLanguageId","issueType","issueStatus","url","request","stringId","addQueryParam","getList","limit","offset","addStringComment","post","defaultConfig","getStringComment","stringCommentId","get","deleteStringComment","delete","editStringComment","patch","Type","IssueType","IssueStatus"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StringCommentsModel = exports.StringComments = void 0;\r\nconst core_1 = require(\"../core\");\r\nclass StringComments extends core_1.CrowdinApi {\r\n    listStringComments(projectId, stringIdOrRequest, type, targetLanguageId, issueType, issueStatus) {\r\n        let url = `${this.url}/projects/${projectId}/comments`;\r\n        let request;\r\n        if (stringIdOrRequest && typeof stringIdOrRequest === 'object') {\r\n            request = stringIdOrRequest;\r\n        }\r\n        else {\r\n            request = { stringId: stringIdOrRequest, type, targetLanguageId, issueStatus, issueType };\r\n        }\r\n        url = this.addQueryParam(url, 'stringId', request.stringId);\r\n        url = this.addQueryParam(url, 'type', request.type);\r\n        url = this.addQueryParam(url, 'targetLanguageId', request.targetLanguageId);\r\n        url = this.addQueryParam(url, 'issueType', request.issueType);\r\n        url = this.addQueryParam(url, 'issueStatus', request.issueStatus);\r\n        return this.getList(url, request.limit, request.offset);\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param request request body\r\n     */\r\n    addStringComment(projectId, request) {\r\n        const url = `${this.url}/projects/${projectId}/comments`;\r\n        return this.post(url, request, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param stringCommentId string comment identifier\r\n     */\r\n    getStringComment(projectId, stringCommentId) {\r\n        const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\r\n        return this.get(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param stringCommentId string comment identifier\r\n     */\r\n    deleteStringComment(projectId, stringCommentId) {\r\n        const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\r\n        return this.delete(url, this.defaultConfig());\r\n    }\r\n    /**\r\n     * @param projectId project identifier\r\n     * @param stringCommentId string comment identifier\r\n     * @param request request body\r\n     */\r\n    editStringComment(projectId, stringCommentId, request) {\r\n        const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\r\n        return this.patch(url, request, this.defaultConfig());\r\n    }\r\n}\r\nexports.StringComments = StringComments;\r\nvar StringCommentsModel;\r\n(function (StringCommentsModel) {\r\n    let Type;\r\n    (function (Type) {\r\n        Type[\"COMMENT\"] = \"comment\";\r\n        Type[\"ISSUE\"] = \"issue\";\r\n    })(Type = StringCommentsModel.Type || (StringCommentsModel.Type = {}));\r\n    let IssueType;\r\n    (function (IssueType) {\r\n        IssueType[\"GENERAL_QUESTION\"] = \"general_question\";\r\n        IssueType[\"TRANSLATION_MISTAKE\"] = \"translation_mistake\";\r\n        IssueType[\"CONTEXT_REQUEST\"] = \"context_request\";\r\n        IssueType[\"SOURCE_MISTAKE\"] = \"source_mistake\";\r\n    })(IssueType = StringCommentsModel.IssueType || (StringCommentsModel.IssueType = {}));\r\n    let IssueStatus;\r\n    (function (IssueStatus) {\r\n        IssueStatus[\"UNRESOLVED\"] = \"unresolved\";\r\n        IssueStatus[\"RESOLVED\"] = \"resolved\";\r\n    })(IssueStatus = StringCommentsModel.IssueStatus || (StringCommentsModel.IssueStatus = {}));\r\n})(StringCommentsModel = exports.StringCommentsModel || (exports.StringCommentsModel = {}));\r\n"]},"metadata":{},"sourceType":"script"}
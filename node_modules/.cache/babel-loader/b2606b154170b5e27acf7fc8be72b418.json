{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Matias/Downloads/new/svy.finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AxisProvider = void 0;\n\nvar axios_1 = require(\"axios\");\n\nvar AxisProvider = /*#__PURE__*/function () {\n  function AxisProvider() {\n    _classCallCheck(this, AxisProvider);\n\n    this.pendingRequests = 0;\n    this.axios = axios_1.default.create({});\n    this.configureRequest();\n    this.configureResponse();\n  }\n\n  _createClass(AxisProvider, [{\n    key: \"configureRequest\",\n    value: function configureRequest() {\n      var _this = this;\n\n      this.axios.interceptors.request.use(function (config) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        return new Promise(function (resolve) {\n          var interval = setInterval(function () {\n            if (_this.pendingRequests < AxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS) {\n              _this.pendingRequests++;\n              clearInterval(interval);\n              resolve(config);\n            }\n          }, AxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS);\n        });\n      });\n    }\n  }, {\n    key: \"configureResponse\",\n    value: function configureResponse() {\n      var _this2 = this;\n\n      this.axios.interceptors.response.use(function (response) {\n        _this2.pendingRequests = Math.max(0, _this2.pendingRequests - 1);\n        return Promise.resolve(response.data);\n      }, function (error) {\n        _this2.pendingRequests = Math.max(0, _this2.pendingRequests - 1);\n\n        if (!!error.response && !!error.response.data) {\n          if (error.response.status === 400) {\n            return Promise.reject(error.response.data);\n          } else {\n            return Promise.reject(error.response.data);\n          }\n        } else {\n          var errorCode = error.response && error.response.status || '500';\n          var defaultError = {\n            error: {\n              code: errorCode,\n              message: \"Request failed. \".concat(error)\n            }\n          };\n          return Promise.reject(defaultError);\n        }\n      });\n    }\n  }]);\n\n  return AxisProvider;\n}();\n\nexports.AxisProvider = AxisProvider;\nAxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS = 15;\nAxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS = 10;","map":{"version":3,"sources":["C:/Users/Matias/Downloads/new/svy.finance/node_modules/@crowdin/crowdin-api-client/out/core/internal/axios/axiosProvider.js"],"names":["Object","defineProperty","exports","value","AxisProvider","axios_1","require","pendingRequests","axios","default","create","configureRequest","configureResponse","interceptors","request","use","config","Promise","resolve","interval","setInterval","CROWDIN_API_MAX_CONCURRENT_REQUESTS","clearInterval","CROWDIN_API_REQUESTS_INTERVAL_MS","response","Math","max","data","error","status","reject","errorCode","defaultError","code","message"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;IACMF,Y;AACF,0BAAc;AAAA;;AACV,SAAKG,eAAL,GAAuB,CAAvB;AACA,SAAKC,KAAL,GAAaH,OAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAuB,EAAvB,CAAb;AACA,SAAKC,gBAAL;AACA,SAAKC,iBAAL;AACH;;;;WACD,4BAAmB;AAAA;;AACf,WAAKJ,KAAL,CAAWK,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoC,UAAAC,MAAM,EAAI;AAC1C;AACA,eAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B,cAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AAC/B,gBAAI,KAAI,CAACb,eAAL,GAAuBH,YAAY,CAACiB,mCAAxC,EAA6E;AACzE,cAAA,KAAI,CAACd,eAAL;AACAe,cAAAA,aAAa,CAACH,QAAD,CAAb;AACAD,cAAAA,OAAO,CAACF,MAAD,CAAP;AACH;AACJ,WAN2B,EAMzBZ,YAAY,CAACmB,gCANY,CAA5B;AAOH,SARM,CAAP;AASH,OAXD;AAYH;;;WACD,6BAAoB;AAAA;;AAChB,WAAKf,KAAL,CAAWK,YAAX,CAAwBW,QAAxB,CAAiCT,GAAjC,CAAqC,UAAAS,QAAQ,EAAI;AAC7C,QAAA,MAAI,CAACjB,eAAL,GAAuBkB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,MAAI,CAACnB,eAAL,GAAuB,CAAnC,CAAvB;AACA,eAAOU,OAAO,CAACC,OAAR,CAAgBM,QAAQ,CAACG,IAAzB,CAAP;AACH,OAHD,EAGG,UAAAC,KAAK,EAAI;AACR,QAAA,MAAI,CAACrB,eAAL,GAAuBkB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,MAAI,CAACnB,eAAL,GAAuB,CAAnC,CAAvB;;AACA,YAAI,CAAC,CAACqB,KAAK,CAACJ,QAAR,IAAoB,CAAC,CAACI,KAAK,CAACJ,QAAN,CAAeG,IAAzC,EAA+C;AAC3C,cAAIC,KAAK,CAACJ,QAAN,CAAeK,MAAf,KAA0B,GAA9B,EAAmC;AAC/B,mBAAOZ,OAAO,CAACa,MAAR,CAAeF,KAAK,CAACJ,QAAN,CAAeG,IAA9B,CAAP;AACH,WAFD,MAGK;AACD,mBAAOV,OAAO,CAACa,MAAR,CAAeF,KAAK,CAACJ,QAAN,CAAeG,IAA9B,CAAP;AACH;AACJ,SAPD,MAQK;AACD,cAAMI,SAAS,GAAIH,KAAK,CAACJ,QAAN,IAAkBI,KAAK,CAACJ,QAAN,CAAeK,MAAlC,IAA6C,KAA/D;AACA,cAAMG,YAAY,GAAG;AACjBJ,YAAAA,KAAK,EAAE;AACHK,cAAAA,IAAI,EAAEF,SADH;AAEHG,cAAAA,OAAO,4BAAqBN,KAArB;AAFJ;AADU,WAArB;AAMA,iBAAOX,OAAO,CAACa,MAAR,CAAeE,YAAf,CAAP;AACH;AACJ,OAvBD;AAwBH;;;;;;AAEL9B,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACAA,YAAY,CAACiB,mCAAb,GAAmD,EAAnD;AACAjB,YAAY,CAACmB,gCAAb,GAAgD,EAAhD","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AxisProvider = void 0;\r\nconst axios_1 = require(\"axios\");\r\nclass AxisProvider {\r\n    constructor() {\r\n        this.pendingRequests = 0;\r\n        this.axios = axios_1.default.create({});\r\n        this.configureRequest();\r\n        this.configureResponse();\r\n    }\r\n    configureRequest() {\r\n        this.axios.interceptors.request.use(config => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            return new Promise(resolve => {\r\n                const interval = setInterval(() => {\r\n                    if (this.pendingRequests < AxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS) {\r\n                        this.pendingRequests++;\r\n                        clearInterval(interval);\r\n                        resolve(config);\r\n                    }\r\n                }, AxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS);\r\n            });\r\n        });\r\n    }\r\n    configureResponse() {\r\n        this.axios.interceptors.response.use(response => {\r\n            this.pendingRequests = Math.max(0, this.pendingRequests - 1);\r\n            return Promise.resolve(response.data);\r\n        }, error => {\r\n            this.pendingRequests = Math.max(0, this.pendingRequests - 1);\r\n            if (!!error.response && !!error.response.data) {\r\n                if (error.response.status === 400) {\r\n                    return Promise.reject(error.response.data);\r\n                }\r\n                else {\r\n                    return Promise.reject(error.response.data);\r\n                }\r\n            }\r\n            else {\r\n                const errorCode = (error.response && error.response.status) || '500';\r\n                const defaultError = {\r\n                    error: {\r\n                        code: errorCode,\r\n                        message: `Request failed. ${error}`,\r\n                    },\r\n                };\r\n                return Promise.reject(defaultError);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.AxisProvider = AxisProvider;\r\nAxisProvider.CROWDIN_API_MAX_CONCURRENT_REQUESTS = 15;\r\nAxisProvider.CROWDIN_API_REQUESTS_INTERVAL_MS = 10;\r\n"]},"metadata":{},"sourceType":"script"}